Broadcast hash join (BHJ)•
Shuffle hash join（SHJ）•
Shuffle sort merge join (SMJ)•
Shuffle-and-replicate nested loop join，又称笛卡尔积（Cartesian product join).）•
Broadcast nested loop join (BNLJ)



Broadcast Hash Join (BHJ)
    BHJ 又称 map-side-only join，从名字可以看出，Join 是在 map 端进行的。这种 Join 要求一张表很小，
    小到足以将表的数据全部放到 Driver 和 Executor 端的内存中，而另外一张表很大。

    Broadcast Hash Join 的实现是将小表的数据广播（broadcast）到 Spark 所有的 Executor 端，
    这个广播过程和我们自己去广播数据没什么区别，先利用 collect 算子将小表的数据从 Executor 
    端拉到 Driver 端，然后在 Driver 端调用 sparkContext.broadcast 广播到所有 Executor 端；
    然后在 Executor 端这个广播出去的数据会和大表进行 Join 操作，这种 Join 策略避免了 Shuffle 操

Broadcast Hash Join 的适用条件
    使用这个 Join 策略必须满足以下条件：

    •小表的数据必须很小，可以通过 spark.sql.autoBroadcastJoinThreshold 参数来配置，默认是 10MB，
    如果你的内存比较大，可以将这个阈值适当加大；如果将 spark.sql.autoBroadcastJoinThreshold 参数设置为 -1，
    可以关闭 BHJ；•只能用于等值 Join，不要求参与 Join 的 keys 可排序；•除了 full outer joins ，支持所有的 Join 类型。


Shuffle Hash Join（SHJ）
    前面介绍的 Broadcast hash join 要求参与 Join 的一张表大小小于 spark.sql.autoBroadcastJoinThreshold 配置的值，
    但是当我们表的数据比这个大，而且这张表的数据又不适合使用广播，这个时候就可以考虑使用 Shuffle hash join。

    Shuffle hash join 同样是在大表和小表进行 Join 的时候选择的一种策略，它的计算思想是：
    把大表和小表按照相同的分区算法和分区数进行分区（根据参与 Join 的 keys 进行分区），
    这样就保证了 hash 值一样的数据都分发到同一个分区中，然后在同一个 Executor 中两张表 hash 
    值一样的分区就可以在本地进行 hash Join 了。在进行 Join 之前，还会对小表 hash 完的分区构建
    hash map。Shuffle hash join 利用了分治思想，把大问题拆解成小问题去解决。

Shuffle Hash Join 的适用条件
    要启用 Shuffle Hash Join 必须满足以下几个条件：

    •仅支持等值 Join，不要求参与 Join 的 Keys 可排序；•spark.sql.join.preferSortMergeJoin 参数必须设置为 false，
    参数是从 Spark 2.0.0 版本引入的，默认值为 true，也就是默认情况下选择 Sort Merge Join；•小表的
    大小（plan.stats.sizeInBytes）必须小于 spark.sql.autoBroadcastJoinThreshold * spark.sql.shuffle.partitions；
    而且小表大小（stats.sizeInBytes）的三倍必须小于等于大表的大小（stats.sizeInBytes），
    也就是 a.stats.sizeInBytes * 3 < = b.stats.sizeInBytes




Shuffle Sort Merge Join (SMJ)
    前面两种 Join 策略对表的大小都有条件的，如果参与 Join 的表都很大，这时候就得考虑用 Shuffle Sort Merge Join 了。

    Shuffle Sort Merge Join 的实现思想：也是对两张表参与 Join 的 Keys 使用相同的分区算法和分区数进行分区，
    目的就是保证相同的 Keys 都落到相同的分区里面。分区完之后再对每个分区按照参与 Join 的 Keys 进行排序，
    最后 Reduce 端获取两张表相同分区的数据进行 Merge Join，也就是 Keys 相同说明 Join 上了。

Shuffle Sort Merge Join 的适用条件
    Shuffle Sort Merge Join 并不是一定就使用的，也需要满足以下条件：

    •仅支持等值 Join，并且要求参与 Join 的 Keys 可排序；






Cartesian product join
    和 MySQL 一样，如果 Spark 中两张参与 Join 的表没指定 where 条件（ON 条件）那么会产生 Cartesian product join，
    这个 Join 得到的结果其实就是两张行数的乘积。

Cartesian product join 的适用条件
    必须是 inner Join，其支持等值和不等值 Join。


Broadcast nested loop join (BNLJ)
    可以看出 Broadcast nested loop join 在某些情况会对某张表重复扫描多次
    ，可见效率非常低下。从名字可以看出，BNLJ 会根据相关条件对小表进行广播，
    以减少表的扫描次数。触发广播的需要满足以下三个条件之一：

    •right outer join 是会广播左表；•left outer, left semi, left anti 或者 existence join 时会广播右表；•inner join 的时候两张表都会广播。

Broadcast nested loop join 的适用条件
    Broadcast nested loop join 支持等值和不等值 Join，支持所有的 Join 类型。
